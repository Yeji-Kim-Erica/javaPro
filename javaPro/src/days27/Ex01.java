package days27;

/**
 * @author 김예지
 * @date 2025. 3. 12.
 * @subject 람다식 (Lamda Expression)
 * @content
 */
public class Ex01 {

	public static void main(String[] args) {
		/* 1. 람다식 (Lamda expression)
		 	1) 자바에서 두번의 큰 변화
		 		- JDK 1.5: 제네릭
		 		- JDK 1.8: 람다식
		 	2) 자바 = 객체지향프로그래밍언어 -> 람다식이 추가되면서 OOP인 동시에 함수형 언어이게 됨 (함수형 언어: 함수가 기반이 되는 언어)
		 		ㄱ. 객체지향적 프로그래밍 = 객체 + 객체 + 객체 + ...
		 								ㄴ 객체 하나당 하나의 클래스..
		 													ㄴ 클래스 내부에 메서드(함수) 선언
		 		ㄴ. 함수형 언어: 독립적인 함수 (클래스 안이 아니라 독립적으로 존재하는 함수)
		 		
		 	2. 람다식이란?
		 	 	: 메서드를 하나의 '수식'으로 표현한 것
		 	 	: 람다라는 연산자를 사용하는 수식
		 	 	예) () -> System.out::println
		 	 	() -> 리턴값 => 메서드의 이름이 존재하지 않음 -> 익명함수
		 	 		ㄴ 람다식을 '익명함수(Anonymous Function)' 라고도 함
		 	 
		 	3. 람다식을 사용하면 메서드보다 코딩이 간결하고 이해가 쉬움 -> 코드의 간결성**
		 		: 객체지향언어의 불편한 점 보완
		 					 ㄴ 메서드를 사용하려면 항상 클래스를 생성한 후에
		 					 	객체명.메서드명() 으로 호출해야 했음
		 	
		 	4. 람다식을 사용하면 메서드를 변수처럼 다룰 수 있음
		 	
		 	5. 람다식을 선언하는 형식: 메서드의 이름과 반환타입을 제거하고, 매개변수 선언부와 몸체{} 사이에 -> 연산자를 추가
		 	   예) 메서드 => 람다식
		 	   
		 	   * 메서드
		 	   반환타입 메서드이름(매개변수...) {
		 	   	명령코딩
		 	   }
		 	   
		 	   * 람다식
		 	   (매개변수...) -> {
		 	   					명령코딩
		 	   				   }
		 	   	
		 	   	[람다식 선언 유형 예시]
		 	   	ㄱ. 첫번째
		 	   	(int a, int b) -> { return a > b ? a : b; }
		 	   	
		 	   	ㄴ. 두번째: 반환값이 있는 메서드인 경우, return문 대신 '수식'으로 대신할 수 있음.
		 	   			  이 수식의 결과가 자동적으로 반환 값이 됨. 세미콜론은 붙이지 않음.
		 	   			  { } 는 생략함.
		 	   	(int a, int b) -> a > b ? a : b
		 	   	
		 	   	ㄷ. 세번째: 매개변수의 타입을 추측할 수 있는 경우에는 생략 가능하다.
		 	   	(a, b) -> a > b ? a : b
		 	   	※ 매개변수 어느 한 개의 타입만 생략하는 것은 허용되지 않는다.
		 	   	 예) (a, int b) -> a > b ? a : b => 불가한 코딩
		 	   	
		 	   	ㄷ-1. 매개변수가 하나인 경우에는 () 괄호를 생략 가능하다.
		 	   	a -> a * a
		 	   	※ 매개변수가 하나일 때 타입을 붙이면 () 괄호 생략이 불가하다.
		 	   	 예) int a -> a * a => 불가능
		 	   	 예) (int a) -> a * a => 가능
		 	   	
		 	   	ㄹ. 네번째: 몸체 { } 에 명령 라인이 1줄인 경우에는 { } 를 생략 가능하다
		 	   	※ 뒤에 세미콜론은 붙이지 않는다.
		 	   	(String name, int age) -> System.out.println(name + "/" + age)
		 */
		
		
	} // main
	
} // class
