package days01;

/**
 * @author yejikim
 * @date 2025. 2. 3. - 오후 3:21:37
 * @subject 자바 프로그램의 기본 구조 설명
 * @content
 * 	자바 프로그램의 기본 구성: 클래스와 메소드
 * 	자바는 객체지향프로그래밍 언어.
 * 	모든 코드는 클래스로 정의됨.
 * 	기본적으로 자바 프로그램은 main() 메소드를 포함하는 클래스로 실행하는 형태로 시작됨.
 * 	main() 메소드는 프로그램의 진입점. 가장 먼저 실행됨.
 */
public class Ex02 {
	
	public static void main(String[] args) {
		/*
		 * 1. 자바는 "객체지향적 프로그래밍(Object Oriented Programming, OOP) 언어"이다.
		 * 		예시) 완성된 프로그램 = 완성된 조립식 컴퓨터으로 생각해보기
		 * 			 완성된 조립 컴퓨터 = 전원부품 + 부품 + 부품 + ...
		 * 				고장난 부품만 교체, 확장 원할 시 그에 맞는 부품으로 변경: 유지, 보수, 확장에 용이
		 * 			 완성된 프로그램 = 객체(Object) + 객체 + ... (= 클래스(시작개체) + 클래스 + ...)
		 * 				Sample.java 소스파일
		 * 				javac Sample.java -> Sample.class 컴파일
		 * 				java Sample 실행
		 * 					-> JRE(JVM) -> Sample 클래스 (시작개체) -> 메서드(method) = 컴퓨터 전원 On/Off 기능
		 * 						main 메서드의 기능: 프로그램의 시작점이자 종료.
		 * 						-> main 메서드를 가진 클래스가 시작 개체의 역할을 함.
		 * 2. 클래스 (= 부품 = 객체/Object) 설계도
		 * 
		 * 3. 자바 클래스 선언 형식
		 * 	[접근 지정자] [기타 제어자] [예약어] [클래스명] { [클래스 몸체] {}
		 * 	}
		 * 	  - Modifier(제어자) = 접근 지정자 + 기타 제어자
		 * 		: 클래스, 메서드, 변수 등의 선언 시 사용되는 키워드로,
		 * 		  해당 요소의 접근 범위나 동작 방식을 제어하는 역할을 함.
		 * 	  - 접근 지정자: 접근 범위를 제어 (예: public, package, private, protected)
		 * 	  - 기타 제어자: 클래스, 변수, 메서드의 동작을 제어 (예: final, abstract, static, strictfp, synchronized 등)
		 * 	  - 예약어: class
		 * 
		 * 	  <예시>
		 * 	  public class Ex02 {
		 * 	  }
		 * 	  -> public은 생략 가능함
		 * 	  - 클래스명의 첫글자는 반드시 대문자로 작성해야 함.
		 * 	  - 식별자: 사용자가 구분을 위해 이름을 준 경우를 말함. (예: 클래스명)
		 * 	  
		 * 	  자바에서 식별자(identifier)를 명명하는 규칙
		 * 		- 첫글자는 문자여야 함: 문자, 밑줄, 달러 기호 (두번째 글자부터는 숫자 사용 가능)
		 * 		- 대소문자를 구분함
		 * 		- 예약어 사용 불가
		 * 		- 의미 있는 이름을 사용하는 것이 가독성을 높이기 좋음
		 * 		- Camel Case 방식: 첫번째 단어는 소문자로 시작하고, 두번째 단어부터는 첫글자를 대문자로 작성
		 * 			ㄴ 대문자로 시작하는 건 클래스 뿐이기 때문
		 * 
		 * 4. 자바에서 메서드를 선언하는 형식
		 * 	[접근지정자] [기타제어자] [리턴자료형] [메서드명]([매개변수(=파라미터, 인자, 인수..)]...) { [메서드몸체]
		 * 	}
		 * 
		 * 	<예시>
		 *  public static void main(String [] args){
		 *  	
		 *  }
		 *  
		 *  - 비유로 예를 들기: 홍길동에게 담배 심부름(일/기능)을 시킬때, 최소한으로 줘야 할 것 = 담배값, 담배명
		 *  	ㄴ 파라미터, 매개변수: 담배값, 담배명
		 *  	ㄴ 반환(리턴)값: 담배
		 *  -> 리턴자료형이 void: 리턴값을 생략함 (리턴값이 없음)
		 * */
	} // main
	
} // class
