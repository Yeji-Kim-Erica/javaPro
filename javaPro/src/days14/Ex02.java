package days14;

/**
 * @author 김예지
 * @date 2025. 2. 20.
 * @subject <이것이 자바다 1권> p.204
 * @content
 */
public class Ex02 {

	public static void main(String[] args) {
		/*
		 * 1. 객체지향 프로그래밍 (Object Oriented Programming)
		 *	예) 조립컴퓨터 = 부품 + 부품 + 부품 + ...
		 *		소프트웨어 = 객체 + 객체 + 객체 + ...
		 * 	생산성 향상, 유지/보수 용이
		 * 
		 * 2. 클래스(Class)란?
		 * 각각의 부품을 만들 때 필요한 설계도
		 * 즉, 객체의 설계도
		 * 
		 * 3. 객체(Object)란? 클래스(설계도면)를 이용해 만든 것. 실제로 존재하는 것.
		 * - 유형의 물건(ex: 자동차, 자전거, 책..)이 될 수도 있고, 무형의 개념(ex: 학과, 강의, 주문..)이 될 수도 있다.
		 * 
		 * 4. 객체 = 속성(특징) + 기능(동작, 객체가 할 수 있는 일)
		 * 객체는 속성과 기능으로 구성되어 있다.
		 * 프로그래밍 언어에서, 속성은 필드. 동작(기능)은 메서드. 라고 부름.
		 * 
		 * 5. 객체 모델링(Object Modeling)이란 ?
		 * 현실세계의 객체를 소프트웨어 객체로 설계하는 것(그 과정)
		 * 현실세계 객체의 대표 속성과 동작을 추려내어 소프트웨어 객체의 필드와 메소드로 정의하는 과정
		 * 
		 * 6. OOP(객체지향 프로그래밍)의 특징 / 클래스의 특징
		 * 	1) 캡슐화: 객체의 데이터(필드), 동작(메소드)을 하나로 묶고 실제 구현 내용을 외부에 감추는 것
		 * 	  (은닉화)
		 * 	   제한자(Modifier) == 접근지정자(접근제한자) + 기타제어자
		 * 		접근제한자를 이용해 캡슐화된 내용을 외부에 노출시킬 것인지 여부를 결정
		 * 		Q. 왜 감추나요?
		 * 		A. 외부의 잘못된 사용으로부터 보호하기 위해 (객체의 손상을 막기 위해)
		 * 	2) 상속성: 부모객체의 필드, 메서드를 자식 객체에 물려주는 것
		 * 		ㄴ 코드의 재사용 (부모객체의 긴 코드를 자식객체에서 중복코딩할 필요가 없음)
		 * 		ㄴ 유지 보수가 용이 (유지보수에 걸리는 시간 최소화. 부모만 수정하면 자식은 다 수정된 거 사용)
		 * 	3) 다형성
		 * 	4) 추상화
		 * 
		 * 7. 클래스, 객체, 인스턴스
		 * - 인스턴스: 클래스로부터 생성된 객체
		 * 	객체: 해당 클래스 타입을 가지고 있는 변수
		 * 	인스턴스: 그 객체에 주소값이 할당된 것
		 * 
		 * 8. 인스턴스화: 클래스로부터 객체를 만드는 과정
		 * 
		 * 9. 객체의 구성요소 (객체의 모든 구성요소는 각각 멤버라고 부른다.)
		 * 	1) 속성==특징 -> 필드 == 멤버 변수
		 * 	2) 기능==일(동작) -> 메소드 == 멤버 함수
		 * 
		 * 10. 클래스의 설계과정
		 * 	1) 객체의 구성요소(속성, 기능) 파악 -> 목록 작성
		 * 	2) 객체 모델링 - 필드, 메소드
		 * 	3) 클래스 선언
		 * 	[접근지정자] [기타제어자] class 클래스명 [extends 부모클래스] [implements 인터페이스...] {
		 * 		필드 선언
		 * 		메서드 선언
		 * }
		 * 		** []: 생략 가능. ...: 여러개 있어도 되고 없어도 됨.
		 * 	4) 객체 생성 - 테스트
		 * 	5) 문제점 파악 - 유지, 보수
		 * 	6) 상용화
		 * 	7) 기능추가, 확장 + 유지, 보수 -> 버전 관리
		 * 
		 * 예) 신형 자동차 클래스 설계
		 * 	 1) 객체의 구성요소(속성, 기능) 파악 -> 목록 작성
		 *   2) 클래스 선언
		 */
		
		
	} // main
	
}
