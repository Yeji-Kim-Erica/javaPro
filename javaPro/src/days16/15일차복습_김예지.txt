1. private로 선언된 필드에 접근한 방법에 대해서 설명하세요.
	
	필드: 클래스 멤버 변수
	
	방법 1) 필드의 접근지정자를 package 또는 public으로 변경
	방법 2) getter, setter 메소드를 이용해 변경: 보통 유효한 자료만 받기 위해 사용함
	방법 3) getter나 setter 메소드 중 하나를 선택해 읽기 전용/ 쓰기 전용으로 이용하고 생성자를 이용해 값을 초기화

2. 기본형/참조형 매개변수와 기본형/참조형 반환타입에 대해서 설명하세요.  ( 개념 )
	
	기본형 매개변수: 메소드의 매개변수를 기본형 자료형으로 받아서 메소드를 실행하는 것
	참조형 매개변수: 참조할 주소값을 매개변수로 받아서 메소드를 실행하는 것.
	기본형 반환타입: 기본형 자료형으로 리턴값을 돌려줌.
	참조형 반환타입: 참조할 주소값을 리턴값으로 돌려줌.

3. 생성자에 대해서 설명하세요.
	
	1. 클래스에서 객체를 생성할 때 이용되는 일종의 메소드.
	2. 메소드와 작성 방식이 비슷하지만 리턴 자료형을 적지 않음. (해당 객체의 주소값을 리턴값으로 가짐)
	3. 클래스 내에 생성자가 하나도 없다면, 컴파일러에서 자동으로 디폴트 생성자를 생성함.
	4. 매개변수가 없는 생성자를 디폴트 생성자라고 부름.
	5. 생성자의 호출시기를 따로 정할 수 없음.
	6. 생성자는 해당 객체의 값을 초기화할 때 사용됨.
	7. 클래스명과 같은 이름만 사용할 수 있음.
	8. 상속되지 않음.
	9. 오버로딩이 가능함.

4. this 키워드에 대해서 설명하세요.

	해당 객체의 주소값을 값으로 가지는 참조변수.
	1) 객체의 멤버를 가리킬 때 사용됨
	2) 
	3) 단독으로는 매개변수 또는 리턴값으로 사용됨

5. 아래 코딩을 클래스( 객체) 배열 초기화를 사용해서 코딩하세요 
		Student s1 = new Student();
		Student s2 = new Student();
		Student s3 = new Student();
		
		Student[] s = { new Student(),
						new Student(),
						new Student() };

6. 객체 복사(copy)와 객체 복제(clone)에 대해서 설명하세요..

	객체 복사: 서로 다른 객체가 같은 인스턴스의 주소를 참조하고 있는 것을 말함.
	객체 복제: 서로 다른 객체가 각각의 인스턴스를 가지나,
			 각각의 인스턴스 내부에 저장된 값 또는 내용이 (참조변수 this의 값을 제외하고) 동일한 것을 말함.

7. 에러 메시지 : The constructor System() [is not visible] 에 대해서 설명하세요.

	is not visible은 해당 클래스의 해당 부분의 접근 지정자에 의해 접근이 불가한 것을 의미하는 메시지.
	이 경우 System이라는 생성자가 현재 클래스에서 접근이 불가하다는 의미이므로,
	System 클래스의 디폴트 생성자가 public이 아니라는 것을 뜻함.
	
	System 클래스의 default constructor의 접근 지정자 때문.

8. [static 키워드]에 대해서 설명하세요.

	static 키워드는 해당 클래스, 필드 또는 메소드가 프로그램의 시작과 동시에 Method Area에 저장되어야 하는 경우 사용됨.
	이 경우 객체를 따로 생성하지 않더라도 static 키워드가 붙은 멤버는 바로 사용이 가능함.
	또한 인스턴스 하나하나에서 생성되는 값이 아니라 하나의 값/메소드가 여러 인스턴스에 그 값을 할당하는 구조이므로,
	static 키워드가 붙은 변수/메소드는 공유 변수/메소드라고도 불리기도 함.
	static 키워드가 붙으면 객체 생성 없이도 값이 생성되어있는 상태이므로 this 참조변수를 통해 사용할 수 없고,
	클래스명.멤버명 과 같은 형식으로 사용해야 함.
	
	static 필드 == 클래스 변수, 공유 변수
	static 메소드
	static 클래스: 내부 클래스에서만 사용 가능.

9. "오버로딩"에 대해서 설명하세요.

	오버로딩은 동일한 메소드 명으로 여러 개의 메소드를 작성할 수 있는 것을 말함.
	오버로딩이 가능한 조건은 두가지인데, 매개변수의 개수가 다르거나 매개변수의 타입이 달라야 함.
	리턴자료형은 오버로딩의 조건에 해당하지 않으므로 주의가 필요함.
 
10. 아래 두 문자열의 대소문자 구분 없이, 순서 상관 없이 같은 문자여부를 체크하는 코딩을 하세요. 
	String n = "keNik";   
	String m= "kKnie";    

	System.out.println(n.equalsIgnoreCase(m));

